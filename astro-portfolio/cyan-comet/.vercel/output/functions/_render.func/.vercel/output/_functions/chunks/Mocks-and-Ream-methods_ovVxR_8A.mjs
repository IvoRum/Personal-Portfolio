import { a as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_CzNe6w_R.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Using Mockito Spy for mocking and using functions as they are. Sometimes you want to use mocks just for some functions. So that’s where <code>when(..).thenCallRealMethod()</code> comes in.</p>\n<p>So let’s get into the code:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">@</span><span style=\"color:#F97583\">SpringBootTest</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> ServiceMockTest</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Autowired</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    private</span><span style=\"color:#E1E4E8\"> MySearchService myService;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">SpyBean</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    private</span><span style=\"color:#E1E4E8\"> MyRepository myRepository;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    void</span><span style=\"color:#B392F0\"> myMockTest</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        when</span><span style=\"color:#E1E4E8\">(myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">()).</span><span style=\"color:#B392F0\">thenReturn</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Hello from the mock!!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // when</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        String msResult </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // then</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        assertEquals</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Hello from the mock!!\"</span><span style=\"color:#E1E4E8\">, msResult);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    void</span><span style=\"color:#B392F0\"> myNormalTest</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        when</span><span style=\"color:#E1E4E8\">(myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">()).</span><span style=\"color:#B392F0\">thenCallRealMethod</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // when</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        String msResult </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // then</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        assertEquals</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Hello from the Real!!\"</span><span style=\"color:#E1E4E8\">, msResult);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And that is how you use mocks and real methods in one <code>@Autowired</code> test class for Spring service and repository testing.</p>";

				const frontmatter = {"title":"Mocks and Real Methods","description":"Practical mocks in Spring Boot","pubDate":"Jun 22, 2024","heroImage":"/blog/blog-placeholder-2.jpg"};
				const file = "C:/tomcats/Personal-Portfolio/astro-portfolio/cyan-comet/src/content/blog/Mocks-and-Ream-methods.md";
				const url = undefined;
				function rawContent() {
					return "\r\nUsing Mockito Spy for mocking and using functions as they are. Sometimes you want to use mocks just for some functions. So that’s where `when(..).thenCallRealMethod()` comes in.\r\n\r\nSo let's get into the code:\r\n\r\n```java\r\n@SpringBootTest\r\nclass ServiceMockTest{\r\n    @Autowired\r\n    private MySearchService myService;\r\n    @SpyBean\r\n    private MyRepository myRepository;\r\n\r\n    @Test\r\n    void myMockTest() {\r\n        when(myService.getMs()).thenReturn(\"Hello from the mock!!\");\r\n        // when\r\n        String msResult = myService.getMs();\r\n        // then\r\n        assertEquals(\"Hello from the mock!!\", msResult);\r\n    }\r\n\r\n    @Test\r\n    void myNormalTest() {\r\n        when(myService.getMs()).thenCallRealMethod();\r\n        // when\r\n        String msResult = myService.getMs();\r\n        // then\r\n        assertEquals(\"Hello from the Real!!\", msResult);\r\n    }\r\n}\r\n```\r\n\r\nAnd that is how you use mocks and real methods in one `@Autowired` test class for Spring service and repository testing.\r\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
