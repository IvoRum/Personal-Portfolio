import { a as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_CzNe6w_R.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h1 id=\"introduction\">Introduction</h1>\n<p>After creating more and more mocks over time, I’ve decided to revisit the topic of mocks in my blog and, more broadly, the subject of testing. In this blog post, I’m summarizing the best ways to easily test with mocks and how to use them effectively.</p>\n<p>In other words, this post aims to show you the most useful parts of the Mockito library, so you can level up as a programmer.</p>\n<h2 id=\"mock-what-is-a-mock\">Mock? What is a Mock?</h2>\n<p>A mock is something that should be there, but in reality, it’s just a facade—it doesn’t actually perform any actions but simply returns what you’ve set it up to return. Just as a puppet imitates a human being, a mock imitates some logic. In a simple example, a mock can imitate a repository that we don’t want to call in our test.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    void</span><span style=\"color:#B392F0\"> myMockTest</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        Repo mockRepo </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> mock</span><span style=\"color:#E1E4E8\">(Repo.class);</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        when</span><span style=\"color:#E1E4E8\">(mockRepo.</span><span style=\"color:#B392F0\">getData</span><span style=\"color:#E1E4E8\">()).</span><span style=\"color:#B392F0\">thenReturn</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // when</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">\t      var</span><span style=\"color:#E1E4E8\"> data </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> mockRepo.</span><span style=\"color:#B392F0\">getData</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // then</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        assertNull</span><span style=\"color:#E1E4E8\">(data);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In essence, this is a way to pull the strings of our own code so that we can test it independently, or in other words, to create a real unit test. Real unit tests do not require external help from other methods or objects. They only test a single unit of work. But how do we test a unit of work that depends on other methods? That’s where mocks come in. By using mocks, we avoid calling every method down the chain of events.</p>\n<h2 id=\"mock-interface\">Mock Interface?</h2>\n<p>Yes, you can mock an implementation of an interface in any class where the interface is called. As an example, I will demonstrate mocking a Spring repository interface, but this is applicable to any interface method.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">@</span><span style=\"color:#F97583\">ExtendWith</span><span style=\"color:#E1E4E8\">(MockitoExtension.class)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">@</span><span style=\"color:#F97583\">SpringBootTest</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> ElMeterServiceTest</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Mock</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    private</span><span style=\"color:#E1E4E8\"> InterfaceRepository interfaceRepository;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    private</span><span style=\"color:#E1E4E8\"> MyService myService;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    private</span><span style=\"color:#F97583\"> static</span><span style=\"color:#F97583\"> final</span><span style=\"color:#E1E4E8\"> String COMPANY_NAME </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"Test_Company\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">BeforeEach</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    void</span><span style=\"color:#B392F0\"> setUp</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        myService </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> MyService</span><span style=\"color:#E1E4E8\">(interfaceRepository);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    void</span><span style=\"color:#B392F0\"> InterfaceMockPositiveTest</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">\t// given</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">\tDataClass mockData </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> DataClass</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Data\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">\tgiven</span><span style=\"color:#E1E4E8\">(interfaceRepository.</span><span style=\"color:#B392F0\">getDataFromRepo</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">123</span><span style=\"color:#E1E4E8\">)).</span><span style=\"color:#B392F0\">willReturn</span><span style=\"color:#E1E4E8\">(Optional.</span><span style=\"color:#B392F0\">of</span><span style=\"color:#E1E4E8\">(mockData));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">\t// when</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">\tDataClass dataFromService </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> myService.</span><span style=\"color:#B392F0\">getDataFromService</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">123</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">\t// then</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">\tassertNotNull</span><span style=\"color:#E1E4E8\">(dataFromService);</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">\tassertEquals</span><span style=\"color:#E1E4E8\">(mockData, dataFromService);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"using-mockito-spy-for-mocking-and-using-functions-as-they-are\">Using Mockito Spy for Mocking and Using Functions as They Are</h2>\n<p>Sometimes you want to use mocks for just some functions. That’s where <code>when(..).thenCallRealMethod()</code> comes in.</p>\n<p>So let’s dive into the code:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> ServiceMockTest</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Autowired</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    private</span><span style=\"color:#E1E4E8\"> MySearchService myService;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">SpyBean</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    private</span><span style=\"color:#E1E4E8\"> MyRepository myRepository;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    void</span><span style=\"color:#B392F0\"> myMockTest</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        when</span><span style=\"color:#E1E4E8\">(myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">()).</span><span style=\"color:#B392F0\">thenReturn</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Hello from the mock!!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // when</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        String msResult </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // then</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        assertEquals</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Hello from the mock!!\"</span><span style=\"color:#E1E4E8\">, msResult);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    @</span><span style=\"color:#F97583\">Test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    void</span><span style=\"color:#B392F0\"> myNormalTest</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        when</span><span style=\"color:#E1E4E8\">(myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">()).</span><span style=\"color:#B392F0\">thenCallRealMethod</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // when</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        String msResult </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> myService.</span><span style=\"color:#B392F0\">getMs</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // then</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        assertEquals</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Hello from the Real!!\"</span><span style=\"color:#E1E4E8\">, msResult);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<p>This is how you can use mocks and real methods in one <code>@Autowired</code> test class for Spring service and repository testing.</p>\n<h2 id=\"mocking-code-that-gets-reused\">Mocking Code That Gets Reused</h2>\n<p>Let’s say you have a utility class that is used in many places in your logic, but you want to mock one call and use the real method the next time. This may happen in a loop or just in the second call. Here is an example where I mock the first call and use the real method in the second.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">@</span><span style=\"color:#F97583\">Test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">void</span><span style=\"color:#B392F0\"> mockOnceThenCallReal</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // GIVEN</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    PersonDTO targetDTO </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> PersonDTO</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        company,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        activityNew.</span><span style=\"color:#B392F0\">getNumber</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        activityNew.</span><span style=\"color:#B392F0\">getCode</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        activityNew.</span><span style=\"color:#B392F0\">getStartDate</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        activityNew.</span><span style=\"color:#B392F0\">getEndDate</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    final</span><span style=\"color:#F97583\"> boolean</span><span style=\"color:#E1E4E8\">[] isCheckDone </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span><span style=\"color:#79B8FF\">false</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    doAnswer</span><span style=\"color:#E1E4E8\">(invocation </span><span style=\"color:#F97583\">-></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">isCheckDone[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">]) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            PersonDTO argument </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> invocation.</span><span style=\"color:#B392F0\">getArgument</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">            if</span><span style=\"color:#E1E4E8\"> (argument.</span><span style=\"color:#B392F0\">equals</span><span style=\"color:#E1E4E8\">(targetDTO)) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                isCheckDone[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">                return</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Call the real method in subsequent calls or if the first check fails</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        isCheckDone[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;  </span><span style=\"color:#6A737D\">// Ensure this is set so that the check isn't repeated</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        invocation.</span><span style=\"color:#B392F0\">callRealMethod</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">         return</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">;  </span><span style=\"color:#6A737D\">// Since the method is void, return null</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }).</span><span style=\"color:#B392F0\">when</span><span style=\"color:#E1E4E8\">(checkPersonName).</span><span style=\"color:#B392F0\">validate</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">any</span><span style=\"color:#E1E4E8\">(PersonDTO.class));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // WHEN THEN</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    assertThrows</span><span style=\"color:#E1E4E8\">(RuntimeException.class,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            () </span><span style=\"color:#F97583\">-></span><span style=\"color:#E1E4E8\"> personService.</span><span style=\"color:#B392F0\">getWorkingPeople</span><span style=\"color:#E1E4E8\">());</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In this case, when calling the <code>checkPersonName</code> method from the <code>PersonDTO</code> class, it will mock the first call and then use the real method, which, in this scenario, will throw a <code>RuntimeException</code>.</p>\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n<p>So that’s mainly it. This is how you will primarily use mocks for day-to-day testing. It’s not practical to dig too deep into mocking. Your mocks should be simple. If you have to mock something very complex, then you need to decompose and decouple your logic. Mocks are meant to replace something, but if you have to replace 90% of something, then what’s the point?</p>\n<h3 id=\"links\">Links</h3>\n<p>If you want to continue reading about mocks, here are some interesting posts that I’ve read:</p>\n<p><a href=\"https://stevenschwenke.de/spyingWithMockito\">Spying with Mockito - to call or not to call a method</a>\r\n<a href=\"https://hatchjs.com/mockito-verify-not-called/\">Mockito Verify Not Called: How to Test That a Method Was Not Called</a></p>";

				const frontmatter = {"title":"So you want to mock","description":"Moking the usfull part","pubDate":"Aug 30, 2024","heroImage":"/blog/mokito_v2.png"};
				const file = "C:/tomcats/Personal-Portfolio/astro-portfolio/cyan-comet/src/content/blog/So-you-want-to-mock.md";
				const url = undefined;
				function rawContent() {
					return "\r\n# Introduction\r\n\r\nAfter creating more and more mocks over time, I've decided to revisit the topic of mocks in my blog and, more broadly, the subject of testing. In this blog post, I’m summarizing the best ways to easily test with mocks and how to use them effectively.\r\n\r\nIn other words, this post aims to show you the most useful parts of the Mockito library, so you can level up as a programmer.\r\n\r\n## Mock? What is a Mock?\r\n\r\nA mock is something that should be there, but in reality, it’s just a facade—it doesn’t actually perform any actions but simply returns what you’ve set it up to return. Just as a puppet imitates a human being, a mock imitates some logic. In a simple example, a mock can imitate a repository that we don't want to call in our test.\r\n\r\n```java\r\n    @Test\r\n    void myMockTest() {\r\n        Repo mockRepo = mock(Repo.class);\r\n        when(mockRepo.getData()).thenReturn(null);\r\n        // when\r\n\r\n\t      var data = mockRepo.getData();\r\n        // then\r\n        assertNull(data);\r\n    }\r\n```\r\n\r\nIn essence, this is a way to pull the strings of our own code so that we can test it independently, or in other words, to create a real unit test. Real unit tests do not require external help from other methods or objects. They only test a single unit of work. But how do we test a unit of work that depends on other methods? That’s where mocks come in. By using mocks, we avoid calling every method down the chain of events.\r\n\r\n## Mock Interface?\r\n\r\nYes, you can mock an implementation of an interface in any class where the interface is called. As an example, I will demonstrate mocking a Spring repository interface, but this is applicable to any interface method.\r\n\r\n```java\r\n\r\n@ExtendWith(MockitoExtension.class)\r\n@SpringBootTest\r\nclass ElMeterServiceTest {\r\n    @Mock\r\n    private InterfaceRepository interfaceRepository;\r\n    private MyService myService;\r\n\r\n    private static final String COMPANY_NAME = \"Test_Company\";\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        myService = new MyService(interfaceRepository);\r\n    }\r\n\r\n    @Test\r\n    void InterfaceMockPositiveTest() {\r\n\t// given\r\n\tDataClass mockData = new DataClass(\"Data\");\r\n\r\n\tgiven(interfaceRepository.getDataFromRepo(123)).willReturn(Optional.of(mockData));\r\n\t// when\r\n\tDataClass dataFromService = myService.getDataFromService(123);\r\n\t// then\r\n\tassertNotNull(dataFromService);\r\n\tassertEquals(mockData, dataFromService);\r\n\r\n    }\r\n}\r\n```\r\n\r\n## Using Mockito Spy for Mocking and Using Functions as They Are\r\n\r\nSometimes you want to use mocks for just some functions. That’s where `when(..).thenCallRealMethod()` comes in.\r\n\r\nSo let's dive into the code:\r\n\r\n```java\r\n\r\nclass ServiceMockTest {\r\n    @Autowired\r\n    private MySearchService myService;\r\n    @SpyBean\r\n    private MyRepository myRepository;\r\n\r\n    @Test\r\n    void myMockTest() {\r\n        when(myService.getMs()).thenReturn(\"Hello from the mock!!\");\r\n        // when\r\n        String msResult = myService.getMs();\r\n        // then\r\n        assertEquals(\"Hello from the mock!!\", msResult);\r\n    }\r\n\r\n    @Test\r\n    void myNormalTest() {\r\n        when(myService.getMs()).thenCallRealMethod();\r\n        // when\r\n        String msResult = myService.getMs();\r\n        // then\r\n        assertEquals(\"Hello from the Real!!\", msResult);\r\n    }\r\n}\r\n\r\n```\r\n\r\nThis is how you can use mocks and real methods in one `@Autowired` test class for Spring service and repository testing.\r\n\r\n## Mocking Code That Gets Reused\r\n\r\nLet’s say you have a utility class that is used in many places in your logic, but you want to mock one call and use the real method the next time. This may happen in a loop or just in the second call. Here is an example where I mock the first call and use the real method in the second.\r\n\r\n```java\r\n@Test\r\nvoid mockOnceThenCallReal() {\r\n    // GIVEN\r\n    PersonDTO targetDTO = new PersonDTO(\r\n        company,\r\n        activityNew.getNumber(),\r\n        activityNew.getCode(),\r\n        activityNew.getStartDate(),\r\n        activityNew.getEndDate()\r\n    );\r\n    final boolean[] isCheckDone = {false};\r\n    doAnswer(invocation -> {\r\n        if (!isCheckDone[0]) {\r\n            PersonDTO argument = invocation.getArgument(0);\r\n            if (argument.equals(targetDTO)) {\r\n                isCheckDone[0] = true;\r\n                return null;\r\n            }\r\n        }\r\n        // Call the real method in subsequent calls or if the first check fails\r\n        isCheckDone[0] = true;  // Ensure this is set so that the check isn't repeated\r\n        invocation.callRealMethod();\r\n         return null;  // Since the method is void, return null\r\n    }).when(checkPersonName).validate(any(PersonDTO.class));\r\n    // WHEN THEN\r\n    assertThrows(RuntimeException.class,\r\n            () -> personService.getWorkingPeople());\r\n}\r\n```\r\n\r\nIn this case, when calling the `checkPersonName` method from the `PersonDTO` class, it will mock the first call and then use the real method, which, in this scenario, will throw a `RuntimeException`.\r\n\r\n## Final Thoughts\r\n\r\nSo that’s mainly it. This is how you will primarily use mocks for day-to-day testing. It’s not practical to dig too deep into mocking. Your mocks should be simple. If you have to mock something very complex, then you need to decompose and decouple your logic. Mocks are meant to replace something, but if you have to replace 90% of something, then what’s the point?\r\n\r\n### Links\r\n\r\nIf you want to continue reading about mocks, here are some interesting posts that I’ve read:\r\n\r\n[Spying with Mockito - to call or not to call a method](https://stevenschwenke.de/spyingWithMockito)\r\n[Mockito Verify Not Called: How to Test That a Method Was Not Called](https://hatchjs.com/mockito-verify-not-called/)\r\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"introduction","text":"Introduction"},{"depth":2,"slug":"mock-what-is-a-mock","text":"Mock? What is a Mock?"},{"depth":2,"slug":"mock-interface","text":"Mock Interface?"},{"depth":2,"slug":"using-mockito-spy-for-mocking-and-using-functions-as-they-are","text":"Using Mockito Spy for Mocking and Using Functions as They Are"},{"depth":2,"slug":"mocking-code-that-gets-reused","text":"Mocking Code That Gets Reused"},{"depth":2,"slug":"final-thoughts","text":"Final Thoughts"},{"depth":3,"slug":"links","text":"Links"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
